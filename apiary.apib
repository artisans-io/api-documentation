FORMAT: 1A
HOST: https://api.artisans.io

# Artisans.io

## Wprowadzenie

Dokumentacja przedstawia listę dostępnych metod oraz wymaganych parametrów do usługi Artisans.io. Usługa ta, została stworzona wyłącznie w celach edukacyjnych, aby umożliwić naukę korzystania z REST API między innymi z platform iOS, HTML5 czy Android.

Obecnie usługa jest w trybie BETA i jest bezpłatna dla wszystkich zarejestrowanych użytkowników.

# Group Autoryzacja

## Rejestracja [/auth/register]

Obecnie rejestracja nie wymaga potwierdzenia poprawności adresu email.

### Rejestracja [POST]

+ Request
     
            {
                "email": "adres@example.com",
                "password": "minimum-8-characters"
            }

+ Response 201

        {
            "data": {
                "success": {
                    "message": "User created successfully",
                    "key": "api.auth.info.user_created"
                }
            }
        }

        

+ Response 400

        {
            "error": {
                "key": "The email field is required.",
                "message": "The email field is required."
            }
        }

## Logowanie [/auth/login]

Aby korzystać z usługi po poprawnej rejestracji należy się zalogować, aby otrzymać token sesji.

### Logowanie [POST]

+ Response 200

        {
            "data": {
                "token": "YOUR_80_CHARACTERS_SESSION_TOKEN_STRING"
            }
        }

## Token uwierzytelnienia [/auth/tokens]

Do korzystania z usługi potrzeby jest token, który można uzyskać po poprawnym zalogowaniu się. Token składa się z 80 znaków.

Token powinien być przesyłany przy każdym wywołaniu API (za wyjątkiem metod /auth/register oraz /auth/login) jako jeden z parametrów.

Token może być przesyłany jako nagłówkek wiadomości HTTP, gdzie poprawna nazwa pola to `X-Access-Token`.

### Użycie tokenu [GET]

+ Request

    + Headers

            X-Access-Token: YOUR_80_CHARACTERS_SESSION_TOKEN_STRING

+ Response 200

            {
                "data": [
                    {
                        "token": "YOUR_80_CHARACTERS_SESSION_TOKEN_STRING",
                        "agent": "Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_10)",
                        "created_at": 1414774893,
                        "expire_at": 1605373293,
                        "last_request_at": 1431041158
                    }
                ]
            }



# Group Mój profil

## Mój profil [/profile]

### Podstawowe dane [GET]
+ Response 200

    + Body

            {
                "data": {
                    "id": "fbe06463-84be-xxxx-a4c3-8717a9e799ab",
                    "avatar": "https://d11570mjfj6i5h.cloudfront.net/avatar.jpg",
                    "firstname": John,
                    "lastname": Doe,
                    "email": "john.doe@gmail.com",
                    "created_at": 1416238889,
                    "updated_at": 14170123535
                }
            }
            

### Aktualizacja danych [PUT]

+ Request 200

            {
                "firstname": "John",
                "lastname": "Doe"
            }

+ Response 400

    + Body
    
            {
                "error": {
                    "code": "error.validation",
                    "message": "Niepoprawny adres email."
                },
                
            }




## Avatar [/avatar/]

### Uaktualnij avatar [POST]

+ Response 200
        
        {
             "data": {
                "avatar": "http://example.com/avatar-new-url.png"
            }
        }

+ Response 400

        {
             "error": {
                "code": "api.error.avatar_size_too_big",
                "message": "Rozmiar avatara jest za duży."
            }
        }

### Usunięcie avatar [DELETE]

+ Response 204

# Group Papuga

Papuga jest usługą, która dla wybranych metod HTTP zwraca wszystkie parametry, które zostały odebrane przez serwer.

## Dostępne metody [/parrot/{?sample_key_1,sample_key_2,etc}]

### GET [GET]

+ Response 200 (application/json)
        
        {
            "headers": {
                "content-type": "application/json"
            },
            "data": {
                "sample_key_1": "recived_value_1",
                "sample_key_2": "recived_value_2"
            }
        }

### POST [POST]

+ Request (application/json)
        
        {
            "sample_key_1": "recived_value_1",
            "sample_key_2": "recived_value_2"
        }

+ Response 200 (application/json)


        {
            "headers": {
                "content-type": "application/json"
            },
            "data": {
                "sample_key_1": "recived_value_1",
                "sample_key_2": "recived_value_2"
            }
        }

### PUT [PUT]

+ Response 200 (application/json)

        
        {
            "headers": {
                "content-type": "application/json"
            },
            "data": {
                "sample_key_1": "recived_value_1",
                "sample_key_2": "recived_value_2"
            }
        }
        
### DELETE [DELETE]

+ Response 204


# Group Administracja

## Lista projektów [/bugs/namespaces]

Namespace powinno być zawsze skrótem (np. od nazwy projektu) oraz powinno być zwracane w odpowiedzi zawsze dużymi literami.

### Metoda GET [GET]

+ Response 200
        
        {
            "data": [
                {
                    "namespace": "WAW"
                },
                {
                    "namespace": "KRK"
                }
            ],
            "pagination": {
                "total": 2,
                "limit": 10,
                "offset": 0
            }
        }

## Lista błędów [/bugs]

+ Parameters
    + namespace (optional, string) ... Skrócona nazwa projektu.

### Pobierz [GET]

Jeśli parametr `namespace` jest pominięty zwracane są wszystkie rekordy niezależnie od przynależności do namespace.

+ Response 200

        {
            "data": [
                {
                    "id": "1234",
                    "content": "Use this field to describe bug.",
                    "priority": 0.85,
                    "status": "open",
                    "namespace": "KRK",
                    "created_at": 1405699047,
                    "updated_at": 1405699047
                }
            ],
            "pagination": {
                "total": 1,
                "limit": 10,
                "offset": 0
            }
        }

### Dodaj [POST]

Parametr `namespace` jest opcjonalny.

+ Request
            
        {
            "content": "This is a bug description.",
            "priority": 0.63,
            "namespace": "KRK"
        }

+ Response 204

## Błędy [/bugs/{id}]

### Pobierz [GET]

+ Response 200

        {
            "data": {
                "id": "5678",
                "content": "This is a bug description.",
                "priority": 0.63,
                "status": "open",
                "created_at": 1405699047,
                "updated_at": 1405699047
            }
        }

### Uaktualnij [PUT]

+ Request
        
        {
            "content": "This is a better bug description.",
            "priority": 0.85,
            "status": "closed"
        }

+ Response 200

        {
            "data": {
                "id": "5678",
                "content": "This is a better bug description.",
                "priority": 0.85,
                "status": "closed",
                "created_at": 1405699047,
                "updated_at": 1405699047
            }
        }

### Usuń [DELETE]

+ Response 204

# Group Biblioteka

## Lista książek [/books/{?limit,offset}]

### Pobierz listę [GET]

+ Response 200

        {
            "data": [
                {
                    "id"        : "dbc173e55fad441bb15195d16954f05c",
                    "isbn"      : "978-83-240-2247-2",
                    "title"     : "Alibi na szczęście. Cz. 1",
                    "author"    : "Anna Ficner-Ogonowska",
                    "cover"     : "https://d11570mjfj6i5h.cloudfront.net/books/1b6453892473a467d07372d45eb05abc2031647a.jpg",
                    "publisher" : "Społeczny Instytut Wydawniczy Znak",
                    "year"      : 2012,
                }
            ],
            "pagination": {
                "total": 414,
                "limit": 20,
                "offset": 0
            }
        }

# Group Lokalizacja

## Państwa [/countries]
### Lista państw [GET]

+ Response 200

        {
            "data": [
                "us" : "Stany Zjednoczone",
                "pl" : "Polska",
                "..." : "...",
                "gb" : "Wielka Brytania"
            ]
        }


## Lista miast [/cities{?country_code}]

### Pobierz listę [GET]

+ Parameters
    + country_code (optional, string) ... Dwuliterowy kod państwa według standardu ISO 3166-2 przykładowo: `us`, `de`, `fr`, `nl`, `pl`.

+ Response 200
 
            {
                "data": [
                    {
                        "geonameid": "1",
                        "name": "Sant Julià de Lòria",
                        "asciiname": "Sant Julia de Loria",
                        "lat": 42.4637,
                        "lon": 1.49129,
                        "feature_code": "PPLA",
                        "country_code": "ad"
                    },
                    {
                        "geonameid": "2",
                        "name": "Ordino",
                        "asciiname": "Ordino",
                        "lat": 42.5562,
                        "lon": 1.53319,
                        "feature_code": "PPLA",
                        "country_code": "ad"
                    }
                ],
                "pagination": {
                    "total": 2,
                    "limit": 10,
                    "offset": 0
                }
            }
